#!/bin/bash
# =================================================================
# Automates the application and management of a GBE fork.
# =================================================================

set -euo pipefail

# --- Source Utilities ---
# Assumes _utils.sh is in the same directory
source "$(dirname "${BASH_SOURCE[0]}")/_utils"

# --- Global Configuration ---
readonly GBE_DIR="$HOME/.local/share/gbe_fork"
readonly STEAM_STORE_API="https://store.steampowered.com/api"
readonly GITHUB_API_URL="https://api.github.com/repos/Detanup01/gbe_fork/releases/latest"

declare -A PLATFORM_CONFIG=(
  [linux]="linux_release libsteam_api.so steamclient.so generate_interfaces_x64 64"
  [win64]="win_release steam_api64.dll steamclient64.dll generate_interfaces_x64.exe 64"
  [win32]="win_release steam_api.dll steamclient.dll generate_interfaces_x32.exe 32"
)

# --- Helper Functions ---

get_hash() {
  local file="$1"
  if command -v md5sum &>/dev/null; then
    md5sum "$file" | awk '{print $1}'
  else
    md5 -q "$file"
  fi
}

backup_and_replace() {
  local src="$1" dest="$2" backup_suffix="${3:-.ORIGINAL}"
  log_info "Backing up '$dest' to '$dest.$(date +'%Y%m%d-%H%M%S')$backup_suffix'"
  mv "$dest" "$dest.$(date +'%Y%m%d-%H%M%S')$backup_suffix"
  log_info "Replacing with '$src'"
  cp "$src" "$dest"
}

fetch_app_name() {
  local appid="$1"
  curl --silent --show-error --retry 3 --max-time 8 "${STEAM_STORE_API}/appdetails?appids=${appid}&filters=basic" |
    jq --raw-output ".\"$appid\".data.name"
}

fetch_dlcs() {
  local appid="$1"
  log_info "Fetching DLCs for appid $appid..."
  local dlc_query_url="https://store.steampowered.com/dlc/${appid}/random/ajaxgetfilteredrecommendations/?query&count=10000"
  local dlcs=$(curl -f -s "$dlc_query_url" | grep -oP 'data-ds-appid=\\"\K\d+' | sort | uniq)
  if [ -z "$dlcs" ]; then
    log_warn "No DLCs found for appid $appid."
    return
  fi
  for dlc in $dlcs; do
    echo "${dlc}=$(fetch_app_name "$dlc")"
  done
}

# --- Main Functions ---

apply_gbe() {
  if [ "$#" -lt 1 ]; then
    log_error "Usage: apply <platform>"
    log_error "Platforms: ${!PLATFORM_CONFIG[@]}"
    log_warn "NOTE: This script will search for Steam API files in the current directory and subdirectories."
    exit 1
  fi

  local platform="$1"
  local config="${PLATFORM_CONFIG[$platform]+_}" # Check if key exists
  if [[ -z "$config" ]]; then
    log_error "Invalid platform: '$platform'."
    log_error "Valid platforms: ${!PLATFORM_CONFIG[@]}"
    exit 1
  fi

  # shellcheck disable=SC2034 # Variables are used dynamically
  read -r fork_subdir target_file additional_file generator arch <<<"${PLATFORM_CONFIG[$platform]}"

  local gbe_path="$GBE_DIR/$fork_subdir/experimental/x${arch}"

  shopt -s globstar nullglob
  local file
  for file in ./**/"$target_file"; do
    if [ ! -f "$file" ]; then
      continue
    fi

    log_info "Found potential target: '$file'"

    local source_file="$gbe_path/$target_file"
    if [ ! -f "$source_file" ]; then
      log_error "Source file not found: '$source_file'."
      log_warn "Skipping '$file'."
      continue
    fi

    if [[ "$(get_hash "$file")" = "$(get_hash "$source_file")" ]]; then
      log_success "File is already up-to-date. Skipping."
      continue
    fi

    # Check for GBE fork strings to avoid replacing an already-patched file
    if strings "$file" | grep -qi "gbe_fork"; then
      log_warn "File '$file' appears to be an existing GBE fork. Skipping."
      continue
    fi

    backup_and_replace "$source_file" "$file"
    if [ -f "$additional_file" ]; then
      backup_and_replace "$gbe_path/$additional_file" "$(dirname "$file")/$additional_file"
    fi

    local generator_path="$GBE_DIR/$fork_subdir/tools/generate_interfaces/$generator"
    if [ -f "$generator_path" ]; then
      log_info "Running generator '$generator'..."
      chmod +x "$generator_path"
      (cd "$(dirname "$file")" && "$generator_path" "$(basename "$file")")
    fi
  done
  log_success "GBE application process completed."
}

update_gbe() {
  log_info "Fetching latest GBE fork from GitHub..."
  local timestamp_file="$GBE_DIR/.gbe_timestamp"

  local updated_at=$(curl -f -s "$GITHUB_API_URL" | jq -r '.assets[0] | .updated_at')
  if [ -z "$updated_at" ]; then
    log_error "Failed to get release information from GitHub."
    return 1
  fi

  if [[ -f "$timestamp_file" && "$updated_at" == "$(cat "$timestamp_file")" ]]; then
    log_success "GBE fork is already up-to-date."
    return 0
  fi

  mkdir -p "$GBE_DIR"

  # --- Download and extract Linux release ---
  log_info "Downloading Linux release..."
  local linux_url=$(curl -f -s "$GITHUB_API_URL" | jq -r '.assets[] | select(.name | endswith("linux-release.tar.bz2")) | .browser_download_url')
  if [ -z "$linux_url" ]; then
    log_error "Failed to get Linux download URL."
    return 1
  fi

  wget -q --show-progress -O "$GBE_DIR/linux.tar.bz2" "$linux_url"
  rm -rf "$GBE_DIR/linux_release"
  mkdir -p "$GBE_DIR/linux_release"
  tar -xjf "$GBE_DIR/linux.tar.bz2" -C "$GBE_DIR/linux_release" --strip-components=1
  rm "$GBE_DIR/linux.tar.bz2"
  log_success "Linux release extracted."

  # --- Download and extract Windows release ---
  log_info "Downloading Windows release..."
  local win_url=$(curl -f -s "$GITHUB_API_URL" | jq -r '.assets[] | select(.name | endswith("win-release.7z")) | .browser_download_url')
  if [ -z "$win_url" ]; then
    log_error "Failed to get Windows download URL."
    return 1
  fi

  wget -q --show-progress -O "$GBE_DIR/win.7z" "$win_url"
  rm -rf "$GBE_DIR/win_release"
  mkdir -p "$GBE_DIR/win_release"
  7z x "$GBE_DIR/win.7z" -o"$GBE_DIR/win_release" -y
  mv "$GBE_DIR/win_release/release"/* "$GBE_DIR/win_release/"
  rmdir "$GBE_DIR/win_release/release"
  rm "$GBE_DIR/win.7z"
  log_success "Windows release extracted."

  # --- Finalize ---
  echo "$updated_at" >"$timestamp_file"
  log_success "GBE fork updated successfully."
}

# --- Command Dispatcher ---

main() {
  if [ "$#" -lt 1 ]; then
    log_error "Usage: $0 <command> [options]"
    echo "Commands:"
    echo "  apply <platform> - Apply GBE to Steam API files"
    echo "  update           - Update the GBE fork repository"
    echo "  dlc <appid>      - Fetch DLCs for a given AppID"
    exit 1
  fi

  local command="$1"
  shift

  case "$command" in
  apply)
    apply_gbe "$@"
    ;;
  update)
    update_gbe
    ;;
  dlc)
    if [ -z "${1:-}" ]; then
      log_error "Usage: $0 dlc <appid>"
      exit 1
    fi
    fetch_dlcs "$1"
    ;;
  *)
    log_error "Invalid command: '$command'"
    main
    ;;
  esac
}

# Execute main function with all arguments
main "$@"
