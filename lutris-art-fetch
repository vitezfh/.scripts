#!/bin/bash

set -e

# Configuration
USER=$(whoami)
DB_PATH="$HOME/.local/share/lutris/pga.db"
COVERS_DIR="$HOME/.cache/lutris/coverart"
API_KEY_FILE="$HOME/.config/lutris_art_apikey.txt"
DIMENSIONS="600x900" # Vertical covers
#DIMENSIONS="460x215" # Banners

# Create necessary directories
mkdir -p "$COVERS_DIR"
mkdir -p "$(dirname "$API_KEY_FILE")"

# Check for required tools
for cmd in sqlite3 jq curl; do
  if ! command -v $cmd &>/dev/null; then
    echo "Error: $cmd is not installed"
    exit 1
  fi
done

# Get or set API key
get_api_key() {
  if [[ -f "$API_KEY_FILE" ]]; then
    API_KEY=$(cat "$API_KEY_FILE")
  else
    echo "You need a SteamGridDB API key."
    echo "Get one at: https://www.steamgriddb.com/profile/preferences/api"
    read -p "Enter your API key: " API_KEY

    # Test the API key
    response=$(curl -s -H "Authorization: Bearer $API_KEY" \
      "https://www.steamgriddb.com/api/v2/grids/game/1?dimensions=$DIMENSIONS")

    if [[ $(echo "$response" | jq -r '.success') != "true" ]]; then
      echo "Invalid API key"
      exit 1
    fi

    echo "$API_KEY" >"$API_KEY_FILE"
    echo "API key saved."
  fi
}

# Search for a game on SteamGridDB
search_game() {
  local game_name=$1
  curl -s -H "Authorization: Bearer $API_KEY" \
    "https://www.steamgriddb.com/api/v2/search/autocomplete/$(echo "$game_name" | sed 's/ /%20/g')" |
    jq -r '.data[0].id // empty'
}

# Download cover art
download_cover() {
  local game_name=$1
  local game_id=$2

  echo "Downloading cover for $game_name"

  # Get the image URL
  image_url=$(curl -s -H "Authorization: Bearer $API_KEY" \
    "https://www.steamgriddb.com/api/v2/grids/game/$game_id?dimensions=$DIMENSIONS" |
    jq -r '.data[0].url // empty')

  if [[ -z "$image_url" ]]; then
    echo "No cover found for $game_name"
    return
  fi

  # Download the image
  curl -s -o "$COVERS_DIR/$game_name.jpg" "$image_url"
}

# Main function
main() {
  echo "Welcome to Lutris Cover Art Downloader!"
  echo "Downloading covers ($DIMENSIONS)"

  get_api_key

  # Get games from Lutris database
  if [[ ! -f "$DB_PATH" ]]; then
    echo "Error: Lutris database not found at $DB_PATH"
    exit 1
  fi

  # Process each game
  sqlite3 "$DB_PATH" "SELECT slug FROM games" | while read -r game_slug; do
    game_name=$(echo "$game_slug" | tr '-' ' ')

    # Skip if cover already exists
    if [[ -f "$COVERS_DIR/$game_slug.jpg" ]]; then
      echo "Cover already exists for $game_name"
      continue
    fi

    # Search for the game
    game_id=$(search_game "$game_slug")
    if [[ -z "$game_id" ]]; then
      echo "No match found for $game_name"
      continue
    fi

    # Download the cover
    download_cover "$game_slug" "$game_id"
  done

  echo "Done! Restart Lutris to see changes."
}

main
